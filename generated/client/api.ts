/* tslint:disable */
/* eslint-disable */
/**
 * Favorite Color API
 * API for managing favorite colors
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
  /**
   * HTTP status code
   * @type {number}
   * @memberof ApiResponse
   */
  statusCode: number;
  /**
   * Response data payload
   * @type {any}
   * @memberof ApiResponse
   */
  data?: any;
  /**
   * Optional message (primarily for errors)
   * @type {string}
   * @memberof ApiResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ColorRecord
 */
export interface ColorRecord {
  /**
   * Primary key (firstName)
   * @type {string}
   * @memberof ColorRecord
   */
  pk: string;
  /**
   * User\'s favorite color
   * @type {string}
   * @memberof ColorRecord
   */
  favoriteColor: string;
  /**
   * Array of colors submitted by the user
   * @type {Array<string>}
   * @memberof ColorRecord
   */
  colors: Array<string>;
  /**
   * Timestamp of the submission
   * @type {string}
   * @memberof ColorRecord
   */
  timestamp: string;
}
/**
 *
 * @export
 * @interface ColorRecordArrayResponse
 */
export interface ColorRecordArrayResponse {
  /**
   * HTTP status code
   * @type {number}
   * @memberof ColorRecordArrayResponse
   */
  statusCode: number;
  /**
   *
   * @type {Array<ColorRecord>}
   * @memberof ColorRecordArrayResponse
   */
  data?: Array<ColorRecord>;
  /**
   * Optional message (primarily for errors)
   * @type {string}
   * @memberof ColorRecordArrayResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ColorRecordResponse
 */
export interface ColorRecordResponse {
  /**
   * HTTP status code
   * @type {number}
   * @memberof ColorRecordResponse
   */
  statusCode: number;
  /**
   *
   * @type {ColorRecord}
   * @memberof ColorRecordResponse
   */
  data?: ColorRecord;
  /**
   * Optional message (primarily for errors)
   * @type {string}
   * @memberof ColorRecordResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface ColorSubmission
 */
export interface ColorSubmission {
  /**
   * User\'s first name (used as primary key)
   * @type {string}
   * @memberof ColorSubmission
   */
  firstName: string;
  /**
   * User\'s favorite color
   * @type {string}
   * @memberof ColorSubmission
   */
  favoriteColor: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * HTTP status code
   * @type {number}
   * @memberof ErrorResponse
   */
  statusCode: number;
  /**
   *
   * @type {any}
   * @memberof ErrorResponse
   */
  data?: any;
  /**
   * Optional message (primarily for errors)
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Search colors by first name
     * @param {string} firstName First name to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsGet: async (
      firstName: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'firstName' is not null or undefined
      assertParamExists("colorsGet", "firstName", firstName);
      const localVarPath = `/colors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (firstName !== undefined) {
        localVarQueryParameter["firstName"] = firstName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary CORS preflight request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/colors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Submit a new favorite color
     * @param {ColorSubmission} colorSubmission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsPost: async (
      colorSubmission: ColorSubmission,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'colorSubmission' is not null or undefined
      assertParamExists("colorsPost", "colorSubmission", colorSubmission);
      const localVarPath = `/colors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        colorSubmission,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Search colors by first name
     * @param {string} firstName First name to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colorsGet(
      firstName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ColorRecordArrayResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colorsGet(
        firstName,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.colorsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary CORS preflight request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colorsOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.colorsOptions(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.colorsOptions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Submit a new favorite color
     * @param {ColorSubmission} colorSubmission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colorsPost(
      colorSubmission: ColorSubmission,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ColorRecordResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colorsPost(
        colorSubmission,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.colorsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Search colors by first name
     * @param {string} firstName First name to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsGet(
      firstName: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ColorRecordArrayResponse> {
      return localVarFp
        .colorsGet(firstName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary CORS preflight request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .colorsOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Submit a new favorite color
     * @param {ColorSubmission} colorSubmission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colorsPost(
      colorSubmission: ColorSubmission,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ColorRecordResponse> {
      return localVarFp
        .colorsPost(colorSubmission, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Search colors by first name
   * @param {string} firstName First name to search for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public colorsGet(firstName: string, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .colorsGet(firstName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary CORS preflight request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public colorsOptions(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .colorsOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Submit a new favorite color
   * @param {ColorSubmission} colorSubmission
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public colorsPost(
    colorSubmission: ColorSubmission,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .colorsPost(colorSubmission, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
